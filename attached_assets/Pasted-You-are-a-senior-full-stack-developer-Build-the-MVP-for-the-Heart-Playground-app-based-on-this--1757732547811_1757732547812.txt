You are a senior full-stack developer. Build the MVP for the “Heart & Playground” app based on this specification:

⚡ Core Vision:
An AI companion + dating training web application with two modes:
1. Heart Mode – emotional AI companion with memory.
2. Dating Training Mode – practice dating scenarios with performance scoring.

⚡ Tech Stack:
- Backend: FastAPI (Python 3.11)
- Database: PostgreSQL with pgvector (for embeddings + memory recall)
- AI Orchestration: LangGraph-based multi-agent system
- Frontend: React (with TailwindCSS)
- Auth: JWT-based signup/login
- Deployment: Ready with Dockerfile + docker-compose

⚡ Core MVP Features (Months 1–3):
1. **Heart Mode**:
   - Chat with 1 AI companion (text interface).
   - Memory system: short-term + long-term using pgvector embeddings.
   - Safety filter + AI disclosure banner.

2. **Dating Training Mode**:
   - 2–3 simple practice scenarios (coffee shop, restaurant, first date).
   - Dating Coach + Conversation Analyzer agents provide scores on:
     - Engagement
     - Empathy
     - Conversation Flow
   - Score shown in dashboard after each session.

3. **Trust & Safety**:
   - Age verification (18+).
   - Usage boundary reminders.
   - Non-therapeutic disclaimer visible in dashboard.

4. **User Dashboard**:
   - See past chats and practice sessions.
   - View progress metrics and scores.
   - Manage profile settings.

⚡ Essential Agents (implement as Python modules inside `/backend/agents/`):
- SupervisorAgent (routes workflows between modes).
- PersonaStylist (maintains AI voice/personality).
- MemoryManager (handles embeddings + recall).
- SafetyGuardian (content filter).
- DatingCoach (training feedback).
- ConversationAnalyzer (performance scoring).
- ScenarioDirector (runs practice scenarios).
- AttachmentMonitor (tracks usage patterns).
- RAGResearcher (world/role consistency).
- BillingAgent (subscription placeholder).
- AnalyticsCollector (collects user behavior metrics).
- RedTeamAgent (safety/jailbreak tester).

⚡ Backend Endpoints (FastAPI):
- `/auth/signup` – user registration
- `/auth/login` – JWT login
- `/chat/companion` – Heart Mode chat
- `/chat/scenario` – run dating scenario
- `/analyze/performance` – return conversation scores
- `/dashboard` – user history + progress

⚡ Frontend Pages (React + Tailwind):
- `LoginPage` + `SignupPage`
- `ChatPage` (Heart Mode chat UI)
- `ScenarioPage` (choose dating practice scenario + run chat)
- `DashboardPage` (shows scores, history, disclaimers, profile)

⚡ Deliverables:
1. Full project structure with `/backend`, `/frontend`, `/agents`, `/tests`.
2. Starter code for FastAPI routes + React components.
3. PostgreSQL schema with:
   - `users`
   - `conversations`
   - `performance_scores`
4. Dockerfile + docker-compose.yml
5. Clean modular code that runs in Replit, and can later be exported to VS Code + GitHub without breaking.
